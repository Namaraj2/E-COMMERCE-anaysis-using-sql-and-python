--  1. List all unique cities where customers are located 

SELECT distinct customer_city FROM customers;



-- 2. Count the number of orders placed in 2017

SELECT COUNT(order_id) FROM orders 
WHERE EXTRACT(YEAR FROM CAST(order_purchase_timestamp AS TIMESTAMP)) = 2017
	

-- 3. Find the total sales per category.
	
select upper(products.product_category) category, 
sum(payments.payment_value) sales 
from products join order_items on products.product_id = order_items.product_id 
join payments on payments.order_id = order_items.order_id 
group by category 
order by 2 desc 
limit 10

	
-- 4. Calculate the percentage of orders that were paid in installments.
	
SELECT 
   (SUM(CASE WHEN payment_installments >= 1 THEN 1 ELSE 0 END)::numeric / COUNT(*)::numeric) * 100 AS percentage_installments
FROM 
    payments
	

-- 5. Count the number of customers from each state.
SELECT customer_state, count(customer_id) from customers
GROUP BY 1
ORDER BY 2 DESC

-- 6. Calculate the number of orders per month in 2018.
	
select TO_CHAR(CAST(order_purchase_timestamp AS TIMESTAMP), 'Month') AS month_name, 
count(order_id) from orders
where extract(year from cast(order_purchase_timestamp as timestamp)) = 2018
group by 1
order by 2
	

-- 7. Find the average number of products per order, grouped by customer city.
	
WITH temp AS (
	SELECT orders.order_id , orders.customer_id, count(order_items.order_id) AS OC
from orders join order_items
on orders.order_id = order_items.order_id
group by 1, 2
	)
	
SELECT customers.customer_city, round(avg(temp.OC), 2) as avg_product_per_order
from customers join temp
ON customers.customer_id = temp.customer_id
group by 1
order by 2 desc
LIMIT 10

	
-- 8. Calculate the percentage of total revenue contributed by each product category.
	
select upper(products.product_category) category, 
round((sum(payments.payment_value)::numeric/(select sum(payment_value)::numeric from payments)) * 100,2) percentage_contribution 
from products join order_items on products.product_id = order_items.product_id 
join payments on payments.order_id = order_items.order_id 
group by category 
order by 2 desc
	

-- 9. Identify the correlation between product price and the number of times a product has been purchased.

select products.product_category, 
count(order_items.product_id) as order_count,
round(avg(order_items.price :: numeric),2) as price
from products join order_items
on products.product_id = order_items.product_id
group by products.product_category
	

-- 10. Calculate the total revenue generated by each seller, and rank them by revenue.
	
with temp as (
        	select order_items.seller_id, 
        	sum(payments.payment_value::numeric)
        	as revenue
            from order_items
            JOIN payments ON order_items.order_id = payments.order_id
            group by 1
	)

select *, dense_rank() over(order by revenue desc) AS rank from temp
LIMIT 5
	

-- 11. Calculate the moving average of order values for each customer over their order history.
	
 with temp as (
                	select orders.customer_id, orders.order_purchase_timestamp, 
                    payments.payment_value as payment
                    from payments join orders
                    on payments.order_id = orders.order_id
                        )
select customer_id, order_purchase_timestamp, payment,
avg(payment) over(partition by customer_id order by order_purchase_timestamp
rows between 2 preceding and current row) as mov_avg
from temp

	
-- 12. Calculate the cumulative sales per month for each year.
	
with temp as (
			select 
			extract(year from cast(order_purchase_timestamp as timestamp)) as years,
			extract(month from cast(orders.order_purchase_timestamp as timestamp)) as months,
			round(sum(payments.payment_value::numeric),2) as payment from orders join payments
			on orders.order_id = payments.order_id
			group by 1, 2 order by 1, 2
                        )
select years, months , payment as sales, sum(payment)
over(order by years, months) cumulative_sales from temp
	

-- 13. Calculate the year-over-year growth rate of total sales.
	
with temp as (
			select 
			extract(year from cast(order_purchase_timestamp as timestamp)) as years,
			round(sum(payments.payment_value::numeric),2) as payment from orders join payments
			on orders.order_id = payments.order_id
			group by 1 order by 1
                        )

select years, round(((payment - lag(payment, 1) over(order by years))/
lag(payment, 1) over(order by years)) * 100::numeric,2) as yoy_percentage_growth from temp

	
-- 14. Identify the top 3 customers who spent the most money in each year.
	
select years, customer_id, payment, rank
from
	(select extract(year from cast(orders.order_purchase_timestamp as timestamp)) as years,
     orders.customer_id,
     sum(payments.payment_value) payment,
     dense_rank() over(partition by 1
     order by sum(payments.payment_value) desc) rank
     from orders join payments 
     on payments.order_id = orders.order_id
     group by 1,2) as a
where rank <= 3